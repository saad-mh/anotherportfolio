"use client"

import { useEffect, useRef } from "react"
import { motion } from "framer-motion"

export default function Hero() {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    if (!canvasRef.current) return

    const canvas = canvasRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    canvas.width = window.innerWidth
    canvas.height = window.innerHeight

    // Mouse position coordinates
    let mouseX = 0
    let mouseY = 0
    // Radius within which particles will interact with the mouse cursor (in pixels)
    const interactionRadius = 150
    // Strength of the attraction/repulsion force between particles and cursor
    const attractionStrength = 0.00005
    // Maximum speed limit for particles
    const maxSpeed = 10

    const particles: Particle[] = []
    const particleCount = 1000

    class Particle {
      x: number            // Current x position
      y: number            // Current y position
      size: number         // Particle size
      speedX: number       // Horizontal velocity
      speedY: number       // Vertical velocity
      originalX: number    // Initial spawn x position
      originalY: number    // Initial spawn y position

      constructor() {
        // Initialize particle at random position
        this.x = Math.random() * canvas.width
        this.y = Math.random() * canvas.height
        // Store original position for return behavior
        this.originalX = this.x
        this.originalY = this.y
        // Random size between 0.1 and 2.1
        this.size = Math.random() * 2 + 0.1
        // Random initial velocity in both directions
        this.speedX = Math.random() * 2 - 1
        this.speedY = Math.random() * 2 - 1
      }

      update() {
        // Calculate distance between particle and mouse cursor
        const dx = mouseX - this.x
        const dy = mouseY - this.y
        const distance = Math.sqrt(dx * dx + dy * dy)

        // Apply attraction force if particle is within interaction radius
        if (distance < interactionRadius) {
          const force = (interactionRadius - distance) / interactionRadius
          this.speedX += dx * force * attractionStrength
          this.speedY += dy * force * attractionStrength
        }

        // Add some natural drift back to original position
        this.speedX += (this.originalX - this.x) * 0.01
        this.speedY += (this.originalY - this.y) * 0.01

        // Apply friction to gradually slow down particles
        this.speedX *= 0.95
        this.speedY *= 0.95

        // Limit the maximum speed
        const speed = Math.sqrt(this.speedX * this.speedX + this.speedY * this.speedY)
        if (speed > maxSpeed) {
          this.speedX = (this.speedX / speed) * maxSpeed
          this.speedY = (this.speedY / speed) * maxSpeed
        }

        // Update position based on speed
        this.x += this.speedX
        this.y += this.speedY

        // Wrap particles around screen edges
        if (this.x > canvas.width) this.x = 0
        if (this.x < 0) this.x = canvas.width
        if (this.y > canvas.height) this.y = 0
        if (this.y < 0) this.y = canvas.height
      }

      draw() {
        if (!ctx) return
        ctx.fillStyle = "rgba(255, 255, 255, 0.5)"
        ctx.beginPath()
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)
        ctx.fill()
      }
    }

    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle())
    }

    function animate() {
      if (!ctx) return
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      for (const particle of particles) {
        particle.update()
        particle.draw()
      }

      requestAnimationFrame(animate)
    }

    animate()

    // Update mouse coordinates relative to canvas position
    const handleMouseMove = (e: MouseEvent) => {
      const rect = canvas.getBoundingClientRect()
      mouseX = e.clientX - rect.left
      mouseY = e.clientY - rect.top
    }

    const handleResize = () => {
      if (!canvasRef.current) return
      canvasRef.current.width = window.innerWidth
      canvasRef.current.height = window.innerHeight
    }

    canvas.addEventListener("mousemove", handleMouseMove)
    window.addEventListener("resize", handleResize)
    
    return () => {
      canvas.removeEventListener("mousemove", handleMouseMove)
      window.removeEventListener("resize", handleResize)
    }
  }, [])

  return (
    <div className="relative h-screen w-full overflow-hidden">
      <canvas ref={canvasRef} className="absolute inset-0 h-full w-full bg-black" />
      <div className="relative z-10 flex h-full flex-col items-center justify-center px-4 text-center">
        <motion.h2
          className="mb-6 text-6xl font-bold tracking-tighter sm:text-7xl lg:text-8xl"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          MOHAMMED SAAD
        </motion.h2>
        <motion.p
          className="max-w-[600px] text-lg text-gray-400 sm:text-xl"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          Student and Developer
        </motion.p>
      </div>
    </div>
  )
}

